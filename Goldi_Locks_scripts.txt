--Kyle Wright--
--Final Project SQL Scripts--
--CMPT308 (Alan)--
----------------------------
--Goldi-Locks Self-Storage--
----------------------------

DROP VIEW IF EXISTS UnitsQuickReport;
DROP VIEW IF EXISTS VacantUnits;
DROP VIEW IF EXISTS SoldUnits;
DROP VIEW IF EXISTS RestrictedUnits;
DROP VIEW IF EXISTS ManagerUnitsView;
DROP VIEW IF EXISTS CustomersInDebt;
DROP VIEW IF EXISTS TotalDebtAndSecDep;
DROP VIEW IF EXISTS EmployeeAccess;
DROP VIEW IF EXISTS CustomerAccess;

DROP TABLE IF EXISTS RentedUnitsHistory;
DROP TABLE IF EXISTS CreditCards;
DROP TABLE IF EXISTS BuildingAccess;
DROP TABLE IF EXISTS Customers;
DROP TABLE IF EXISTS Employees;
DROP TABLE IF EXISTS People;
DROP TABLE IF EXISTS ManagerUnits;
DROP TABLE IF EXISTS Units;
DROP TABLE IF EXISTS UnitSizes;
DROP TABLE IF EXISTS Buildings;
DROP TABLE IF EXISTS ZipCodes;

----------
--Tables--
----------
--Buildings--
CREATE TABLE Buildings (
	bid			int not null,
 primary key(bid)
);

INSERT INTO Buildings (bid)
VALUES
	(1),
	(2)
;

select *
from Buildings
;

--UnitSizes--
CREATE TABLE UnitSizes (
	dimensions	text not null, --not strictly atomic
	isCC		boolean not null, --is climate controlled
	priceUSD	numeric(6,2), --monthly rate
 primary key(dimensions, isCC)
);

INSERT INTO UnitSizes (dimensions, isCC, priceUSD)
VALUES
	('5x5', '1', 65.00),
	('10x10', '1', 110.00),
	('10x10', '0', 80.00),
	('10x20', '0', 130.00)
;

select *
from UnitSizes
;

--ZipCodes--
CREATE TABLE ZipCodes (
	zipCode		text not null,
	state		text,
	city		text,
 primary key(zipCode)
);

INSERT INTO ZipCodes (zipCode, state, city)
VALUES
	('06415', 'Connecticut', 'Colchester'),
	('06249', 'Connecticut', 'Lebanon')
;

select *
from ZipCodes
;

--Units--
CREATE TABLE Units (
	uid			int not null,
	bid			int not null references Buildings(bid),
	status		char, --V=vacant,0=occupied,R=restricted
	dimensions	text not null,
	isCC		boolean not null,
 foreign key(dimensions, isCC) references UnitSizes(dimensions, isCC),
 primary key(uid)
);

INSERT INTO Units (uid, bid, status, dimensions, isCC)
VALUES
	(1, 1, 'O', '10x10', '0'),
	(2, 1, 'O', '10x20', '0'),
	(3, 1, 'O', '10x10', '1'),
	(4, 2, 'V', '5x5', '1'),
	(5, 2, 'R', '5x5', '1'),
	(6, 2, 'O', '10x10', '0'),
	(7, 2, 'O', '10x20', '0')
;

select *
from Units
;

--ManagerUnits--
CREATE TABLE ManagerUnits (
	uid			int not null references Units(uid),
	contents	text --not strictly atomic
);

INSERT INTO ManagerUnits (uid, contents)
VALUES
	(1, 'tools, light bulbs, spare boxes'),
	(7, 'Oldsmobile Cutlass 442')
;

select *
from ManagerUnits
;

--People--
CREATE TABLE People (
	pid			int not null,
	zipCode		text references ZipCodes(zipCode),
	address1	text, --line 1
	address2	text, --line 2
	prefix		text,
	firstName	text not null,
	lastName	text,
	dob			date,
	accessCode	int UNIQUE,
 primary key(pid)
);

INSERT INTO People (pid, zipCode, address1, address2, prefix, firstName, lastName, dob, accessCode)
VALUES
	(10, '06415', '30 Main St.', null, 'Dr.', 'Alan', 'Labouseur', '2-13-72', 2633),
	(20, '06415', '786 Park Blvd.', null, 'Dr.', 'Donald', 'Schwartz', '7-5-61', 5714),
	(30, '06249', '13 Smith St.', 'Apt. A', null, 'Rick', 'Treu', '5-16-84', null),
	(40, '06415', '89 Lebanon Ave.', null, 'Mr.', 'Greg', 'Vilardo', '4-26-01', 1198),
	(50, '06249', '2 Cragin Dr.', null, 'Ms.', 'Linda', 'Baker', '2-13-72', null)
;

select *
from People
;

--Employees--
CREATE TABLE Employees (
	pid			int not null references People(pid),
 primary key(pid)
);

INSERT INTO Employees (pid)
VALUES
	(40)
;

select *
from Employees
;

--Customers--
CREATE TABLE Customers (
	pid			int not null references People(pid),
	debtUSD		numeric(8,2) not null,
	is24hr		boolean not null,
	secDepUSD	numeric(8,2),
 primary key(pid)
);

INSERT INTO Customers (pid, debtUSD, is24hr, secDepUSD)
VALUES
	(10, 0, '1', 245.00),
	(20, 100.00, '0', 65.00),
	(40, 20.00, '0', 110.00),
	(30, 0, '0', 0)
;

select *
from Customers
;

--BuildingAccess--
CREATE TABLE BuildingAccess (
	pid			int not null references People(pid),
	bid			int not null references Buildings(bid),
	entryDate	date not null,
	entryTime	time not null,
 primary key(pid, bid, entryDate, entryTime)
);

INSERT INTO BuildingAccess (pid, bid, entryDate, entryTime)
VALUES
	(40, 1, '3-2-22', '13:17:09'),
	(10, 1, '3-2-22', '22:31:43'),
	(40, 2, '3-3-22', '09:03:54'),
	(20, 1, '3-4-22', '11:42:43'),
	(20, 2, '3-4-22', '10:14:27')
;

select *
from BuildingAccess
;

--CreditCards--
CREATE TABLE CreditCards (
	cardNum		text not null,
	expiration	text not null,
	cvv			text not null,
	pid			int not null references Customers(pid),
 primary key(cardNum, expiration, cvv)
);

INSERT INTO CreditCards (cardNum, expiration, cvv, pid)
VALUES
	('5927384994129411', '10/25', '905', 10)
;

select *
from CreditCards
;

--RentedUnitsHistory--
CREATE TABLE RentedUnitsHistory (
	uid			int not null references Units(uid),
	pid			int not null references Customers(pid),
	startDate	date not null,
	endDate		date CHECK (endDate is null or endDate > startDate),
 primary key(uid, pid, startDate)
);

INSERT INTO RentedUnitsHistory (uid, pid, startDate, endDate)
VALUES
	(2, 10, '3-1-22', null),
	(6, 10, '3-1-22', null),
	(5, 20, '11-15-21', null),
	(3, 40, '5-12-21', null),
	(4, 30, '12-3-21', '2-28-22'),
	(2, 20, '11-15-21', '2-17-22')
;

select *
from RentedUnitsHistory
;


---------
--Views--
---------
--VacantUnits--
CREATE VIEW VacantUnits (uid, bid, status, dimensions, isCC)
AS
	select u.uid, u.bid, u.status, u.dimensions, u.isCC
	from Units u
	where status = 'V'
	;

select *
from VacantUnits
;

--SoldUnits--
CREATE VIEW SoldUnits (uid, bid, status, dimensions, isCC)
AS
	select u.uid, u.bid, u.status, u.dimensions, u.isCC
	from Units u
	where status = 'O' and u.uid not in(select uid
									    from ManagerUnits)
	;

select *
from SoldUnits
;

--RestrictedUnits--
CREATE VIEW RestrictedUnits (uid, bid, status, dimensions, isCC)
AS
	select u.uid, u.bid, u.status, u.dimensions, u.isCC
	from Units u
	where status = 'R'and u.uid not in(select uid
									   from ManagerUnits)
	;

select *
from RestrictedUnits
;

--ManagerUnitsView--
CREATE VIEW ManagerUnitsView (uid, bid, status, dimensions, isCC, contents)
AS
	select u.uid, u.bid, u.status, u.dimensions, u.isCC, mu.contents
	from Units u inner join ManagerUnits mu on(u.uid = mu.uid)
	;

select *
from ManagerUnitsView
;

--CustomersInDebt--
CREATE VIEW CustomersInDebt (pid, firstName, lastName, debtUSD, address1, address2, city, state, zipCode)
AS
	select c.pid, p.firstName, p.lastName, c.debtUSD, p.address1, p.address2, zip.city, zip.state, zip.zipCode
	from Customers c inner join People p on(c.pid = p.pid)
				     inner join ZipCodes zip on(p.zipCode = zip.ZipCode)
	where c.debtUSD > 0
	;

select *
from CustomersInDebt
;

--TotalDebtAndSecDep--
CREATE VIEW TotalDebtAndSecDep (totalDebtUSD, totalSecDepUSD)
AS
	select sum(c.debtUSD), sum(c.secDepUSD)
	from Customers c
	;

select *
from TotalDebtAndSecDep
;

--EmployeeAccess--
CREATE VIEW EmployeeAccess (pid, building, entryDate, entryTime)
AS
	select ba.pid, ba.bid, ba.entryDate, ba.entryTime
	from BuildingAccess ba
	where pid in(select pid
				 from Employees)
	order by entryDate desc
	;

select *
from EmployeeAccess
;

--CustomerAccess--
CREATE VIEW CustomerAccess (pid, building, entryDate, entryTime)
AS
	select ba.pid, ba.bid, ba.entryDate, ba.entryTime
	from BuildingAccess ba
	where pid in(select pid
				 from Customers
				 where pid not in(select pid
								  from Employees))
	order by entryDate desc
	;

select *
from CustomerAccess
;

--UnitsQuickReport--
CREATE VIEW UnitsQuickReport (total, manager, vacant, sold, restricted)
AS
	select count(u.uid),
		   count(m.uid),
		   count(v.uid),
		   count(s.uid),
		   count(r.uid)
	from Units u left outer join ManagerUnits m on(u.uid = m.uid)
				 left outer join VacantUnits v on(u.uid = v.uid)
				 left outer join SoldUnits s on(u.uid = s.uid)
				 left outer join RestrictedUnits r on(u.uid = r.uid)
	;

select *
from UnitsQuickReport
;

---------------------
--Stored Procedures--
---------------------
